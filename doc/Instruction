//File that describe LLVM instructions

// Terminator Instructions - These instructions are used to terminate a basic
// block of the program.   Every basic block must end with one of these
// instructions for it to be a well formed basic block.
//

(ID, NAME, TYPE)

( 1, Ret           , ReturnInst       )
( 2, Br            , BranchInst       )
( 3, Switch        , SwitchInst       )
( 4, IndirectBr    , IndirectBrInst   )
( 5, Invoke        , InvokeInst       )
( 6, Resume        , ResumeInst       )
( 7, Unreachable   , UnreachableInst  )
( 8, CleanupRet    , CleanupReturnInst)
( 9, CatchRet      , CatchReturnInst  )
(10, CatchSwitch   , CatchSwitchInst  )

// Standard binary operators...
(11, Add  , BinaryOperator)
(12, FAdd , BinaryOperator)
(13, Sub  , BinaryOperator)
(14, FSub , BinaryOperator)
(15, Mul  , BinaryOperator)
(16, FMul , BinaryOperator)
(17, UDiv , BinaryOperator)
(18, SDiv , BinaryOperator)
(19, FDiv , BinaryOperator)
(20, URem , BinaryOperator)
(21, SRem , BinaryOperator)
(22, FRem , BinaryOperator)

// Logical operators (integer operands)
(23, Shl  , BinaryOperator) // Shift left  (logical)
(24, LShr , BinaryOperator) // Shift right (logical)
(25, AShr , BinaryOperator) // Shift right (arithmetic)
(26, And  , BinaryOperator)
(27, Or   , BinaryOperator)
(28, Xor  , BinaryOperator)

// Memory operators...
(29, Alloca, AllocaInst       )  // Stack management
(30, Load  , LoadInst         )  // Memory manipulation instrs
(31, Store , StoreInst        )
(32, GetElementPtr, GetElementPtrInst)
(33, Fence , FenceInst        )
(34, AtomicCmpXchg , AtomicCmpXchgInst)
(35, AtomicRMW , AtomicRMWInst)

// Cast operators ...
// NOTE: The order matters here because CastInst::isEliminableCastPair
// NOTE: (see Instructions.cpp) encodes a table based on this ordering.
(36, Trunc   , TruncInst    )  // Truncate integers
(37, ZExt    , ZExtInst     )  // Zero extend integers
(38, SExt    , SExtInst     )  // Sign extend integers
(39, FPToUI  , FPToUIInst   )  // floating point -> UInt
(40, FPToSI  , FPToSIInst   )  // floating point -> SInt
(41, UIToFP  , UIToFPInst   )  // UInt -> floating point
(42, SIToFP  , SIToFPInst   )  // SInt -> floating point
(43, FPTrunc , FPTruncInst  )  // Truncate floating point
(44, FPExt   , FPExtInst    )  // Extend floating point
(45, PtrToInt, PtrToIntInst )  // Pointer -> Integer
(46, IntToPtr, IntToPtrInst )  // Integer -> Pointer
(47, BitCast , BitCastInst  )  // Type cast
(48, AddrSpaceCast, AddrSpaceCastInst)  // addrspace cast

(49, CleanupPad, CleanupPadInst)
(50, CatchPad  , CatchPadInst)

// Other operators...
(51, ICmp   , ICmpInst    )  // Integer comparison instruction
(52, FCmp   , FCmpInst    )  // Floating point comparison instr.
(53, PHI    , PHINode     )  // PHI node instruction
(54, Call   , CallInst    )  // Call a function
(55, Select , SelectInst  )  // select instruction
(56, UserOp1, Instruction )  // May be used internally in a pass
(57, UserOp2, Instruction )  // Internal to passes only
(58, VAArg  , VAArgInst   )  // vaarg instruction
(59, ExtractElement, ExtractElementInst )   // extract from vector
(60, InsertElement, InsertElementInst   )   // insert into vector
(61, ShuffleVector, ShuffleVectorInst   )   // shuffle two vectors.
(62, ExtractValue, ExtractValueInst     )   // extract from aggregate
(63, InsertValue, InsertValueInst       )   // insert into aggregate
(64, LandingPad, LandingPadInst         )   // Landing pad instruction.
