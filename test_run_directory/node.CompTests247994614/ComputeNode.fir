;buildInfoPackage: chisel3, version: 3.1.7, scalaVersion: 2.12.4, sbtVersion: 1.1.1, builtAtString: 2019-03-20 22:12:35.973, builtAtMillis: 1553119955973
circuit ComputeNode : 
  module UALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in1 : UInt<16>, flip in2 : UInt<16>, out : UInt<16>}
    
    node in1S = asSInt(io.in1) @[Alu.scala 147:21]
    node in2S = asSInt(io.in1) @[Alu.scala 148:21]
    node _T_11 = add(io.in1, io.in2) @[Alu.scala 153:32]
    node _T_12 = tail(_T_11, 1) @[Alu.scala 153:32]
    node _T_13 = sub(io.in1, io.in2) @[Alu.scala 154:32]
    node _T_14 = asUInt(_T_13) @[Alu.scala 154:32]
    node _T_15 = tail(_T_14, 1) @[Alu.scala 154:32]
    node _T_16 = and(io.in1, io.in2) @[Alu.scala 155:32]
    node _T_17 = or(io.in1, io.in2) @[Alu.scala 156:31]
    node _T_18 = xor(io.in1, io.in2) @[Alu.scala 157:32]
    node _T_19 = xor(io.in1, io.in2) @[Alu.scala 158:35]
    node _T_20 = not(_T_19) @[Alu.scala 158:26]
    node _T_21 = bits(in2S, 8, 0) @[Alu.scala 159:52]
    node _T_22 = bits(io.in2, 8, 0) @[Alu.scala 159:47]
    node _T_23 = dshl(io.in1, _T_22) @[Alu.scala 159:38]
    node _T_24 = bits(in2S, 8, 0) @[Alu.scala 160:53]
    node _T_25 = bits(io.in2, 8, 0) @[Alu.scala 160:48]
    node _T_26 = dshr(io.in1, _T_25) @[Alu.scala 160:39]
    node _T_27 = bits(io.in2, 15, 0) @[Alu.scala 161:62]
    node _T_28 = dshr(io.in1, _T_27) @[Alu.scala 161:53]
    node _T_29 = asSInt(io.in1) @[Alu.scala 162:49]
    node _T_30 = bits(io.in2, 15, 0) @[Alu.scala 162:65]
    node _T_31 = dshr(_T_29, _T_30) @[Alu.scala 162:56]
    node _T_32 = asUInt(_T_31) @[Alu.scala 162:89]
    node _T_33 = asSInt(io.in1) @[Alu.scala 163:40]
    node _T_34 = asSInt(io.in2) @[Alu.scala 163:56]
    node _T_35 = lt(_T_33, _T_34) @[Alu.scala 163:47]
    node _T_36 = asSInt(io.in1) @[Alu.scala 164:43]
    node _T_37 = asSInt(io.in2) @[Alu.scala 164:59]
    node _T_38 = lt(_T_36, _T_37) @[Alu.scala 164:50]
    node _T_39 = eq(io.in1, io.in2) @[Alu.scala 165:45]
    node _T_40 = mul(io.in1, io.in2) @[Alu.scala 168:32]
    node _T_41 = div(io.in1, io.in2) @[Alu.scala 169:32]
    node _T_42 = rem(io.in1, io.in2) @[Alu.scala 170:32]
    node _T_43 = gt(io.in1, io.in2) @[Alu.scala 171:36]
    node _T_44 = mux(_T_43, io.in1, io.in2) @[Alu.scala 171:28]
    node _T_45 = lt(io.in1, io.in2) @[Alu.scala 172:36]
    node _T_46 = mux(_T_45, io.in1, io.in2) @[Alu.scala 172:28]
    io.out <= _T_12 @[Alu.scala 208:10]
    
  module ComputeNode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enable : {flip ready : UInt<1>, valid : UInt<1>, bits : {taskID : UInt<10>, control : UInt<1>}}, Out : {flip ready : UInt<1>, valid : UInt<1>, bits : {predicate : UInt<1>, taskID : UInt<10>, data : UInt<16>}}[1], flip LeftIO : {flip ready : UInt<1>, valid : UInt<1>, bits : {predicate : UInt<1>, taskID : UInt<10>, data : UInt<16>}}, flip RightIO : {flip ready : UInt<1>, valid : UInt<1>, bits : {predicate : UInt<1>, taskID : UInt<10>, data : UInt<16>}}}
    
    reg token : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[HandShaking.scala 164:25]
    reg nodeID_R : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[HandShaking.scala 165:25]
    wire _T_9 : {taskID : UInt<10>, control : UInt<1>} @[interfaces.scala 357:20]
    _T_9.control <= UInt<1>("h00") @[interfaces.scala 358:18]
    _T_9.taskID <= UInt<1>("h00") @[interfaces.scala 359:17]
    reg enable_R : {taskID : UInt<10>, control : UInt<1>}, clock with : (reset => (reset, _T_9)) @[HandShaking.scala 168:31]
    reg enable_valid_R : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[HandShaking.scala 169:31]
    reg out_ready_R_0 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[HandShaking.scala 172:46]
    reg out_valid_R_0 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[HandShaking.scala 173:46]
    wire out_ready_W_0 : UInt<1>
    out_ready_W_0 <= UInt<1>("h00")
    io.Out[0].valid <= out_valid_R_0 @[HandShaking.scala 184:21]
    out_ready_W_0 <= io.Out[0].ready @[HandShaking.scala 185:20]
    node _T_76 = and(io.Out[0].ready, io.Out[0].valid) @[Decoupled.scala 37:37]
    when _T_76 : @[HandShaking.scala 186:29]
      out_ready_R_0 <= io.Out[0].ready @[HandShaking.scala 188:22]
      out_valid_R_0 <= UInt<1>("h00") @[HandShaking.scala 190:22]
      skip @[HandShaking.scala 186:29]
    node _T_78 = not(enable_valid_R) @[HandShaking.scala 196:22]
    io.enable.ready <= _T_78 @[HandShaking.scala 196:19]
    node _T_79 = and(io.enable.ready, io.enable.valid) @[Decoupled.scala 37:37]
    when _T_79 : @[HandShaking.scala 197:27]
      enable_valid_R <= io.enable.valid @[HandShaking.scala 198:20]
      enable_R <- io.enable.bits @[HandShaking.scala 199:14]
      skip @[HandShaking.scala 197:27]
    reg value : UInt<15>, clock with : (reset => (reset, UInt<15>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_84 = eq(value, UInt<15>("h07fff")) @[Counter.scala 34:24]
      node _T_86 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_87 = tail(_T_86, 1) @[Counter.scala 35:22]
      value <= _T_87 @[Counter.scala 35:13]
      skip @[Counter.scala 63:17]
    node _T_88 = and(UInt<1>("h01"), _T_84) @[Counter.scala 64:20]
    wire _T_90 : {predicate : UInt<1>, taskID : UInt<10>, data : UInt<16>} @[interfaces.scala 294:20]
    _T_90.data <= UInt<1>("h00") @[interfaces.scala 295:15]
    _T_90.predicate <= UInt<1>("h00") @[interfaces.scala 296:20]
    _T_90.taskID <= UInt<1>("h00") @[interfaces.scala 297:17]
    reg left_R : {predicate : UInt<1>, taskID : UInt<10>, data : UInt<16>}, clock with : (reset => (reset, _T_90)) @[ComputeNode.scala 49:23]
    reg left_valid_R : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ComputeNode.scala 50:29]
    wire _T_98 : {predicate : UInt<1>, taskID : UInt<10>, data : UInt<16>} @[interfaces.scala 294:20]
    _T_98.data <= UInt<1>("h00") @[interfaces.scala 295:15]
    _T_98.predicate <= UInt<1>("h00") @[interfaces.scala 296:20]
    _T_98.taskID <= UInt<1>("h00") @[interfaces.scala 297:17]
    reg right_R : {predicate : UInt<1>, taskID : UInt<10>, data : UInt<16>}, clock with : (reset => (reset, _T_98)) @[ComputeNode.scala 53:24]
    reg right_valid_R : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ComputeNode.scala 54:30]
    node _T_105 = or(right_R.taskID, left_R.taskID) @[ComputeNode.scala 56:34]
    node task_ID_R = or(_T_105, enable_R.taskID) @[ComputeNode.scala 56:50]
    wire _T_107 : {predicate : UInt<1>, taskID : UInt<10>, data : UInt<16>} @[interfaces.scala 294:20]
    _T_107.data <= UInt<1>("h00") @[interfaces.scala 295:15]
    _T_107.predicate <= UInt<1>("h00") @[interfaces.scala 296:20]
    _T_107.taskID <= UInt<1>("h00") @[interfaces.scala 297:17]
    reg out_data_R : {predicate : UInt<1>, taskID : UInt<10>, data : UInt<16>}, clock with : (reset => (reset, _T_107)) @[ComputeNode.scala 59:27]
    reg state : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ComputeNode.scala 62:22]
    inst FU of UALU @[ComputeNode.scala 72:18]
    FU.clock <= clock
    FU.reset <= reset
    FU.io.in1 <= left_R.data @[ComputeNode.scala 73:13]
    FU.io.in2 <= right_R.data @[ComputeNode.scala 74:13]
    node _T_113 = not(left_valid_R) @[ComputeNode.scala 76:22]
    io.LeftIO.ready <= _T_113 @[ComputeNode.scala 76:19]
    node _T_114 = and(io.LeftIO.ready, io.LeftIO.valid) @[Decoupled.scala 37:37]
    when _T_114 : @[ComputeNode.scala 77:26]
      left_R <- io.LeftIO.bits @[ComputeNode.scala 78:12]
      left_valid_R <= UInt<1>("h01") @[ComputeNode.scala 79:18]
      skip @[ComputeNode.scala 77:26]
    node _T_116 = not(right_valid_R) @[ComputeNode.scala 82:23]
    io.RightIO.ready <= _T_116 @[ComputeNode.scala 82:20]
    node _T_117 = and(io.RightIO.ready, io.RightIO.valid) @[Decoupled.scala 37:37]
    when _T_117 : @[ComputeNode.scala 83:27]
      right_R <- io.RightIO.bits @[ComputeNode.scala 84:13]
      right_valid_R <= UInt<1>("h01") @[ComputeNode.scala 85:19]
      skip @[ComputeNode.scala 83:27]
    io.Out[0].bits.data <= out_data_R.data @[ComputeNode.scala 97:20]
    io.Out[0].bits.taskID <= out_data_R.taskID @[ComputeNode.scala 97:20]
    io.Out[0].bits.predicate <= out_data_R.predicate @[ComputeNode.scala 97:20]
    node _T_119 = or(left_R.taskID, right_R.taskID) @[ComputeNode.scala 98:44]
    node _T_120 = or(_T_119, enable_R.taskID) @[ComputeNode.scala 98:61]
    io.Out[0].bits.taskID <= _T_120 @[ComputeNode.scala 98:27]
    node _T_121 = eq(UInt<1>("h00"), state) @[Conditional.scala 37:30]
    when _T_121 : @[Conditional.scala 40:58]
      node _T_122 = and(enable_valid_R, left_valid_R) @[ComputeNode.scala 106:27]
      node _T_123 = and(_T_122, right_valid_R) @[ComputeNode.scala 106:43]
      when _T_123 : @[ComputeNode.scala 106:61]
        out_valid_R_0 <= UInt<1>("h01") @[HandShaking.scala 240:27]
        state <= UInt<1>("h01") @[ComputeNode.scala 108:15]
        when enable_R.control : @[ComputeNode.scala 109:32]
          out_data_R.data <= FU.io.out @[ComputeNode.scala 110:27]
          out_data_R.predicate <= enable_R.control @[ComputeNode.scala 111:32]
          node _T_125 = or(left_R.taskID, right_R.taskID) @[ComputeNode.scala 112:46]
          node _T_126 = or(_T_125, enable_R.taskID) @[ComputeNode.scala 112:63]
          out_data_R.taskID <= _T_126 @[ComputeNode.scala 112:29]
          skip @[ComputeNode.scala 109:32]
        else : @[ComputeNode.scala 113:21]
          out_data_R.data <= UInt<1>("h00") @[ComputeNode.scala 114:27]
          out_data_R.predicate <= enable_R.control @[ComputeNode.scala 115:32]
          node _T_128 = or(left_R.taskID, right_R.taskID) @[ComputeNode.scala 116:46]
          node _T_129 = or(_T_128, enable_R.taskID) @[ComputeNode.scala 116:63]
          out_data_R.taskID <= _T_129 @[ComputeNode.scala 116:29]
          skip @[ComputeNode.scala 113:21]
        skip @[ComputeNode.scala 106:61]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_130 = eq(UInt<1>("h01"), state) @[Conditional.scala 37:30]
      when _T_130 : @[Conditional.scala 39:67]
        node _T_131 = and(io.Out[0].ready, io.Out[0].valid) @[Decoupled.scala 37:37]
        node _T_132 = or(out_ready_R_0, _T_131) @[HandShaking.scala 222:83]
        when _T_132 : @[ComputeNode.scala 121:26]
          left_valid_R <= UInt<1>("h00") @[ComputeNode.scala 125:22]
          right_valid_R <= UInt<1>("h00") @[ComputeNode.scala 126:23]
          state <= UInt<1>("h00") @[ComputeNode.scala 128:15]
          out_data_R.predicate <= UInt<1>("h00") @[ComputeNode.scala 130:30]
          out_ready_R_0 <= UInt<1>("h00") @[HandShaking.scala 248:27]
          enable_valid_R <= UInt<1>("h00") @[HandShaking.scala 249:20]
          node _T_138 = bits(reset, 0, 0) @[ComputeNode.scala 134:17]
          node _T_140 = eq(_T_138, UInt<1>("h00")) @[ComputeNode.scala 134:17]
          when _T_140 : @[ComputeNode.scala 134:17]
            printf(clock, UInt<1>(1), "[LOG] [ComputeNode] [TID->%d] [COMPUTE] $anonfun: Output fired @ %d, Value: %d (%d + %d)\n", task_ID_R, value, FU.io.out, left_R.data, right_R.data) @[ComputeNode.scala 134:17]
            skip @[ComputeNode.scala 134:17]
          skip @[ComputeNode.scala 121:26]
        skip @[Conditional.scala 39:67]
    
